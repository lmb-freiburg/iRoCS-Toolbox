/**************************************************************************
 *
 * Copyright (C) 2015 Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

namespace atb
{

  template<typename DataT, int Dim>
  SeparableCorrelationFilter<DataT,Dim>::SeparableCorrelationFilter(
      BoundaryTreatmentType btType, DataT const &boundaryValue)
          : SeparableFilter<DataT,Dim,DataT>(btType, boundaryValue),
            _kernels(reinterpret_cast<blitz::Array<DataT,1>*>(NULL))
  {}

  template<typename DataT, int Dim>
  SeparableCorrelationFilter<DataT,Dim>::SeparableCorrelationFilter(
      blitz::TinyVector<blitz::Array<DataT,1> *,Dim> const &kernels,
      BoundaryTreatmentType btType, DataT const &boundaryValue)
          : SeparableFilter<DataT,Dim,DataT>(btType, boundaryValue)
  {
    for (int d = 0; d < Dim; ++d)
    {
      if (kernels(d) == NULL) _kernels(d) = NULL;
      else
      {
        _kernels(d) = new blitz::Array<DataT,1>(kernels(d)->size());
        std::memcpy(_kernels(d)->data(), kernels(d)->data(),
                    kernels(d)->size() * sizeof(DataT));
      }
    }
  }

  template<typename DataT, int Dim>
  SeparableCorrelationFilter<DataT,Dim>::~SeparableCorrelationFilter()
  {
    for (int d = 0; d < Dim; ++d) delete _kernels(d);
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::setKernelForDim(
      blitz::Array<DataT,1> const *kernel, int dim)
  {
    delete _kernels(dim);
    if (kernel == NULL) _kernels(dim) = NULL;
    else
    {
      _kernels(dim) = new blitz::Array<DataT,1>(kernel->size());
      std::memcpy(_kernels(dim)->data(), kernel->data(),
                  kernel->size() * sizeof(DataT));
    }
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::setKernels(
      blitz::TinyVector<blitz::Array<DataT,1> *,Dim> const &kernels)
  {
    for (int d = 0; d < Dim; ++d) setKernelForDim(kernels(d), d);
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::applyAlongDim(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<DataT,Dim> &filtered, int dim,
      iRoCS::ProgressReporter *pr) const
  {
    if (&data != &filtered) filtered.resize(data.shape());

    if (_kernels(dim) == NULL || _kernels(dim)->size() == 0)
    {
      if (&data != &filtered)
          std::memcpy(
              filtered.data(), data.data(), data.size() * sizeof(DataT));
      return;
    }

    DataT const *kernel = _kernels(dim)->data();
    ptrdiff_t n = data.extent(dim);
    ptrdiff_t m = _kernels(dim)->size();

    if (m > n) {
      applyAlongDimNaive(data, elementSizeUm, filtered, dim, pr);
      return;
    }

    ptrdiff_t center = m / 2;

    // If CropBT is used pre-compute the border weights
    // The weights for the left border are stored in the first half
    // The weights for the right border are stored in the second half
    DataT *weights = NULL;
    if (this->p_bt->type() == CropBT)
    {
      weights = new DataT[m - 1];
      DataT kernelSum = static_cast<DataT>(blitz::sum(*_kernels(dim)));

      // Initialize first weight with kernel center
      weights[0] = kernel[center];

      // Add residual kernel entries as long as the kernel overlaps with the
      // data
      for (ptrdiff_t j = center + 1; j < m && j - center < n; ++j)
          weights[0] += kernel[j];

      // Incrementally compute the weights for the shifted kernels
      for (ptrdiff_t i = 1; i < center; ++i)
      {
        weights[i] = weights[i - 1] + kernel[center - i];

        // Data smaller than kernel, remove kernel element that is no longer
        // over data element
        ptrdiff_t deleteIndex = n + center - i;
        if (deleteIndex < m) weights[i] -= kernel[deleteIndex];
      }

      // Initialize last weight with kernel center
      weights[m - 2] = kernel[center];

      // Add residual kernel entries from right to left as long as the
      // kernel overlaps with the data
      for (ptrdiff_t j = center - 1; j >= 0 && n - j + center >= 0; --j)
          weights[m - 2] += kernel[j];

      // Incrementally compute the weights for the shifted kernels
      for (ptrdiff_t i = m - 3; i >= center; --i)
      {
        weights[i] = weights[i + 1] + kernel[center - i + m - 2];

        // Data smaller than kernel, remove kernel element that is no longer
        // over data element
        ptrdiff_t deleteIndex = center - i + m - 2 - n;
        if (deleteIndex >= 0) weights[i] -= kernel[deleteIndex];
      }
#ifdef _OPENMP
#pragma omp parallel for
#endif
      for (ptrdiff_t i = 0; i < m - 1; ++i) weights[i] /= kernelSum;
    }

    // ToDo: If the kernel is bigger than the image there is still a problem
    // Write a test case and fix the problem

    ptrdiff_t currentVoxel = 0;
    int totalProgress = (pr != NULL) ?
        (pr->taskProgressMax() - pr->taskProgressMin()) : 1;
#ifdef _OPENMP
#pragma omp parallel for
#endif
    for (ptrdiff_t i = 0; i < static_cast<ptrdiff_t>(data.size()) / n; ++i)
    {
      if (pr != NULL)
      {
        if (pr->isAborted()) continue;
#ifdef _OPENMP
#pragma omp critical
#endif
        {
          if (currentVoxel % 1000 == 0)
              pr->updateProgress(
                  pr->taskProgressMin() + (totalProgress * currentVoxel) /
                  (data.size() / n - 1));
          ++currentVoxel;
        }
      }
      blitz::TinyVector<ptrdiff_t,Dim> pos;
      ptrdiff_t resid = i;
      for (int d = Dim - 1; d >= 0; --d)
      {
        if (d != dim)
        {
          pos(d) = resid % data.extent(d);
          resid /= data.extent(d);
        }
      }
      pos(dim) = 0;

      ptrdiff_t stride = data.stride(dim);
      DataT const *constLineIter = &data(pos);

      // Copy the Array line into a temporary processing buffer
      DataT *tmp = new DataT[n];
      for (ptrdiff_t j = 0; j < n; ++j, constLineIter += stride)
          tmp[j] = *constLineIter;

      DataT *f = new DataT[n];

      ptrdiff_t p = 0;

      // Left border
      for (; p < center; ++p)
      {
        f[p] = traits<DataT>::zero;
        if (this->p_bt->type() == CropBT)
        {
          for (ptrdiff_t k = center - p; k < m; ++k)
          {
            ptrdiff_t q = p + k - center;
            if (q >= n) break;
            f[p] += kernel[k] * tmp[q];
          }
          f[p] /= weights[p];
        }
        else
        {
          for (ptrdiff_t k = 0; k < center - p; ++k)
              f[p] += kernel[k] * this->p_bt->get(tmp, p + k - center, n);
          for (ptrdiff_t k = center - p; k < m; ++k)
          {
            ptrdiff_t q = p + k - center;
            if (q < n) f[p] += kernel[k] * tmp[q];
            else f[p] += kernel[k] * this->p_bt->get(tmp, q, n);
          }
        }
      }

      // Central part
      for (; p < n - center; ++p)
      {
        f[p] = traits<DataT>::zero;
        for (ptrdiff_t k = 0; k < m; ++k)
            f[p] += kernel[k] * tmp[p + k - center];
      }

      // Right border
      for (; p < n; ++p)
      {
        f[p] = traits<DataT>::zero;
        if (this->p_bt->type() == CropBT)
        {
          for (ptrdiff_t k = 0; k < m - 1 - p + n - center; ++k)
          {
            ptrdiff_t q = p + k - center;
            if (q >= 0) f[p] += kernel[k] * tmp[q];
          }
          f[p] /= weights[p - n + 2 * center];
        }
        else
        {
          for (ptrdiff_t k = 0; k < m - 1 - p + n - center; ++k)
          {
            ptrdiff_t q = p + k - center;
            if (q >= 0) f[p] += kernel[k] * tmp[q];
            else f[p] += kernel[k] * this->p_bt->get(tmp, q, n);
          }
          for (ptrdiff_t k = m - 1 - p + n - center; k < m; ++k)
              f[p] += kernel[k] * this->p_bt->get(tmp, p + k - center, n);
        }
      }

      DataT *lineIter = &filtered(pos);
      for (ptrdiff_t j = 0; j < n; ++j, lineIter += stride)
          *lineIter = f[j];

      delete[] tmp;
      delete[] f;
    }
    if (pr != NULL) pr->setProgress(pr->taskProgressMax());
    delete[] weights;
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::applyAlongDimNaive(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &,
      blitz::Array<DataT,Dim> &filtered, int dim,
      iRoCS::ProgressReporter *pr) const
  {
    if (&data != &filtered) filtered.resize(data.shape());

    if (_kernels(dim) == NULL || _kernels(dim)->size() == 0)
    {
      if (&data != &filtered)
          std::memcpy(
              filtered.data(), data.data(), data.size() * sizeof(DataT));
      return;
    }

    DataT const *kernel = _kernels(dim)->data();
    ptrdiff_t n = data.extent(dim);
    ptrdiff_t m = _kernels(dim)->size();
    ptrdiff_t center = m / 2;

    // If CropBT is used pre-compute the border weights
    DataT *weights = NULL;
    if (this->p_bt->type() == CropBT)
    {
      weights = new DataT[n];
      std::memset(weights, 0, n * sizeof(DataT));
      DataT kernelSum = kernel[0];
      for (ptrdiff_t j = 1; j < m; ++j) kernelSum += kernel[j];
      for (ptrdiff_t i = 0; i < n; ++i) {
        for (ptrdiff_t j = 0; j < m; ++j) {
          ptrdiff_t idx = i + j - center;
          if (idx >= 0 && idx < n) weights[i] += kernel[j];
        }
      }
      for (ptrdiff_t i = 0; i < n; ++i) weights[i] /= kernelSum;
    }

    ptrdiff_t currentVoxel = 0;
    int totalProgress = (pr != NULL) ?
        (pr->taskProgressMax() - pr->taskProgressMin()) : 1;
#ifdef _OPENMP
#pragma omp parallel for
#endif
    for (ptrdiff_t c = 0; c < static_cast<ptrdiff_t>(data.size()) / n; ++c)
    {
      if (pr != NULL)
      {
        if (pr->isAborted()) continue;
#ifdef _OPENMP
#pragma omp critical
#endif
        {
          if (currentVoxel % 1000 == 0)
              pr->updateProgress(
                  pr->taskProgressMin() + (totalProgress * currentVoxel) /
                  (data.size() / n - 1));
          ++currentVoxel;
        }
      }
      blitz::TinyVector<ptrdiff_t,Dim> pos;
      ptrdiff_t resid = c;
      for (int d = Dim - 1; d >= 0; --d)
      {
        if (d != dim)
        {
          pos(d) = resid % data.extent(d);
          resid /= data.extent(d);
        }
      }
      pos(dim) = 0;

      ptrdiff_t stride = data.stride(dim);
      DataT const *constLineIter = &data(pos);

      // Copy the Array line into a temporary processing buffer
      DataT *tmp = new DataT[n];
      for (ptrdiff_t i = 0; i < n; ++i, constLineIter += stride)
          tmp[i] = *constLineIter;

      DataT *f = new DataT[n];

      for (ptrdiff_t i = 0; i < n; ++i) {
        f[i] = DataT(0);
        for (ptrdiff_t j = 0; j < m; ++j) {
          ptrdiff_t idx = i + j - center;
          if (this->p_bt->type() == CropBT) {
            if (idx >= 0 && idx < n) f[i] += kernel[j] * tmp[idx];
          }
          else f[i] += kernel[j] * this->p_bt->get(tmp, idx, n);
        }
        if (this->p_bt->type() == CropBT) f[i] /= weights[i];
      }

      DataT *lineIter = &filtered(pos);
      for (ptrdiff_t i = 0; i < n; ++i, lineIter += stride)
          *lineIter = f[i];

      delete[] tmp;
      delete[] f;
    }
    if (pr != NULL) pr->setProgress(pr->taskProgressMax());
    delete[] weights;
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::apply(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<DataT,Dim> &filtered, iRoCS::ProgressReporter *pr) const
  {
    if (&data != &filtered)
    {
      filtered.resize(data.shape());
      std::memcpy(filtered.data(), data.data(), data.size() * sizeof(DataT));
    }

    int progressMin = (pr != NULL) ? pr->taskProgressMin() : 0;
    int progressMax = (pr != NULL) ? pr->taskProgressMax() : 100;
    for (int d = 0; d < Dim; ++d)
    {
      if (pr != NULL)
      {
        if (pr->isAborted()) break;
        pr->setTaskProgressMin(
            progressMin + d * (progressMax - progressMin) / Dim);
        pr->setTaskProgressMax(
            progressMin + (d + 1) * (progressMax - progressMin) / Dim);
      }
      applyAlongDim(filtered, elementSizeUm, filtered, d, pr);
    }
    if (pr != NULL)
    {
      pr->setTaskProgressMin(progressMin);
      pr->setTaskProgressMax(progressMax);
      pr->setProgress(progressMax);
    }
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::apply(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<DataT,Dim> &filtered,
      blitz::TinyVector<blitz::Array<DataT,1>*,Dim> const &kernels,
      BoundaryTreatmentType btType, DataT const &boundaryValue,
      iRoCS::ProgressReporter *pr)
  {
    SeparableCorrelationFilter<DataT,Dim> f(kernels, btType, boundaryValue);
    f.apply(data, elementSizeUm, filtered, pr);
  }

  template<typename DataT, int Dim>
  void SeparableCorrelationFilter<DataT,Dim>::apply(
      Array<DataT,Dim> const &data, Array<DataT,Dim> &filtered,
      blitz::TinyVector<blitz::Array<DataT,1>*,Dim> const &kernels,
      BoundaryTreatmentType btType, DataT const &boundaryValue,
      iRoCS::ProgressReporter *pr)
  {
    SeparableCorrelationFilter<DataT,Dim> f(kernels, btType, boundaryValue);
    f.apply(data, filtered, pr);
  }

}
