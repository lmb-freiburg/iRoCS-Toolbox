/**************************************************************************
 *
 * Copyright (C) 2015 Thorsten Falk
 *
 *        Image Analysis Lab, University of Freiburg, Germany
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 *
 **************************************************************************/

namespace atb
{

  template<typename DataT, int Dim>
  DataT const FastPhaseOnlyCorrelationFilter<DataT,Dim>::eps =
      std::numeric_limits<DataT>::epsilon();

  template<typename DataT, int Dim>
  FastPhaseOnlyCorrelationFilter<DataT,Dim>::FastPhaseOnlyCorrelationFilter(
      blitz::Array<DataT,Dim> const &kernel,
      BoundaryTreatmentType bt, DataT const &boundaryValue)
          : Filter<DataT,Dim,DataT>(bt, boundaryValue), _kernel(kernel),
            _kernelFFTCache() {}

  template<typename DataT, int Dim>
  FastPhaseOnlyCorrelationFilter<DataT,Dim>::
  ~FastPhaseOnlyCorrelationFilter() {}

  template<typename DataT, int Dim>
  void FastPhaseOnlyCorrelationFilter<DataT,Dim>::apply(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<DataT,Dim> &result,
      iRoCS::ProgressReporter *pr) const {
    int pStart = (pr != NULL) ? pr->taskProgressMin() : 0;
    int pScale = (pr != NULL) ? pr->taskProgressMax() - pStart : 1;
    if (pr != NULL && !pr->updateProgress(pStart)) return;

    BlitzFFTW<DataT>* fft = BlitzFFTW<DataT>::instance();

    if (blitz::all(data.shape() == _kernel.shape()) &&
        this->p_bt->type() == CyclicBT && data.extent(Dim - 1) % 2 == 0)
    {
      // This is the simple case of a normal correlation
      blitz::TinyVector<BlitzIndexT,Dim> fftShape(data.shape());
      fftShape(Dim - 1) = fftShape(Dim - 1) / 2 + 1;

      blitz::Array<std::complex<DataT>,Dim> dataFFT(fftShape);
      blitz::Array<std::complex<DataT>,Dim> *kernelFFT = &_kernelFFTCache;
      if (blitz::any(_kernelFFTCache.shape() != fftShape)) {
        blitz::Array<DataT,Dim> kernelPadded(data.shape());
        fft->plan_forward(kernelPadded, dataFFT, BlitzFFTW<DataT>::OVERWRITE);
        if (pr != NULL && pr->isAborted()) return;
        fft->plan_backward(dataFFT, kernelPadded, BlitzFFTW<DataT>::OVERWRITE);
        if (pr != NULL && pr->isAborted()) return;
        std::memcpy(kernelPadded.data(), _kernel.data(),
                    _kernel.size() * sizeof(DataT));
        if (pr != NULL && pr->isAborted()) return;
        fft->translate(
            kernelPadded, kernelPadded, blitz::TinyVector<atb::BlitzIndexT,Dim>(
                -kernelPadded.shape() / 2));
        if (omp_in_parallel()) {
          std::cerr << "Warning cache miss during parallel execution of fast "
                    << "normalized cross correlation... "
                    << "Transforming without cache" << std::endl;
          kernelFFT = new blitz::Array<std::complex<DataT>,Dim>(fftShape);
        }
        else kernelFFT->resize(fftShape);
        if (pr != NULL && pr->isAborted()) return;
        fft->forward(kernelPadded, *kernelFFT);
        if (pr != NULL && pr->isAborted()) return;
      }

      if (&result != &data) {
        result.resize(data.shape());
        std::memcpy(result.dataFirst(), data.dataFirst(),
                    data.size() * sizeof(DataT));
      }

      if (pr != NULL && !pr->updateProgress(
              static_cast<int>(pStart + 0.05 * pScale))) return;

      // Do correlation
      fft->forward(result, dataFFT);

      if (pr != NULL && !pr->updateProgress(
              static_cast<int>(pStart + 0.55 * pScale))) return;

#ifdef _OPENMP
#pragma omp parallel for
#endif
      for (size_t i = 0; i < dataFFT.size(); ++i)
          dataFFT.dataFirst()[i] *=
              std::conj(kernelFFT->dataFirst()[i]) /
              (std::abs(dataFFT.dataFirst()[i] *
                        std::conj(kernelFFT->dataFirst()[i]))+ eps);

      if (pr != NULL && !pr->updateProgress(
              static_cast<int>(pStart + 0.6 * pScale))) return;

      if (kernelFFT != &_kernelFFTCache) delete kernelFFT;

      fft->backward(dataFFT, result, BlitzFFTW<DataT>::OVERWRITE);
      dataFFT.free();

      if (pr != NULL && !pr->updateProgress(
              static_cast<int>(pStart + 0.95 * pScale))) return;

#ifdef _OPENMP
#pragma omp parallel for
#endif
      for (size_t i = 0; i < result.size(); ++i)
          result.dataFirst()[i] /= result.size();

      if (pr != NULL && !pr->updateProgress(
              static_cast<int>(pStart + 0.99 * pScale))) return;

      fft->saveWisdom();

      if (pr != NULL) pr->updateProgress(pr->taskProgressMax());

      return;
    }

    blitz::TinyVector<BlitzIndexT,Dim> paddedShape;
    paddedShape = data.shape() + _kernel.shape() - 1;
    paddedShape = fft->getPaddedShape(paddedShape);

    blitz::TinyVector<BlitzIndexT,Dim> fftShape(paddedShape);
    fftShape(Dim - 1) = fftShape(Dim - 1) / 2 + 1;

    blitz::Array<DataT,Dim> dataPadded(paddedShape);
    blitz::Array<std::complex<DataT>,Dim> dataFFT(fftShape);

    blitz::Array<std::complex<DataT>,Dim> *kernelFFT = &_kernelFFTCache;
    if (blitz::any(_kernelFFTCache.shape() != fftShape))
    {
      fft->plan_forward(dataPadded, dataFFT, BlitzFFTW<DataT>::OVERWRITE);
      if (pr != NULL && pr->isAborted()) return;
      fft->plan_backward(dataFFT, dataPadded, BlitzFFTW<DataT>::OVERWRITE);
      if (pr != NULL && pr->isAborted()) return;
      blitz::Array<DataT,Dim> kernelPadded(paddedShape);
      blitz::TinyVector<BlitzIndexT,Dim> lbK, ubK;
      fft->pad(_kernel, kernelPadded, lbK, ubK, paddedShape);

      if (pr != NULL && pr->isAborted()) return;
      fft->unShuffle(kernelPadded, kernelPadded);
      if (pr != NULL && pr->isAborted()) return;
      if (omp_in_parallel())
      {
        std::cerr << "Warning cache miss during parallel execution of fast "
                  << "normalized cross correlation... "
                  << "Transforming without cache" << std::endl;
        kernelFFT = new blitz::Array<std::complex<DataT>,Dim>(fftShape);
      }
      else kernelFFT->resize(fftShape);
      fft->forward(kernelPadded, *kernelFFT);
      if (pr != NULL && pr->isAborted()) return;
    }

    if (pr != NULL && !pr->updateProgress(
            static_cast<int>(pStart + 0.05 * pScale))) return;

    blitz::TinyVector<BlitzIndexT,Dim> lb, ub;
    switch (this->p_bt->type())
    {
    case ValueBT:
      fft->pad(data, dataPadded, lb, ub, paddedShape,
               BlitzFFTW<DataT>::VALUE,
               reinterpret_cast<ValueBoundaryTreatment<DataT,Dim>*>(
                   this->p_bt)->boundaryValue());
      break;
    case RepeatBT:
      fft->pad(data, dataPadded, lb, ub, paddedShape,
               BlitzFFTW<DataT>::REPEATBORDER);
      break;
    case MirrorBT:
      fft->pad(data, dataPadded, lb, ub, paddedShape,
               BlitzFFTW<DataT>::MIRRORBORDER);
      break;
    case CyclicBT:
      fft->pad(data, dataPadded, lb, ub, paddedShape,
               BlitzFFTW<DataT>::CYCLICBORDER);
      break;
    default:
      throw RuntimeError(
          "FastPhaseOnlyCorrelationFilter<DataT,Dim>::apply(): "
          "Invalid Boundary treatment mode, choose one of ValueBT, "
          "CyclicBT, RepeatBT or MirrorBT.");
    }

    if (pr != NULL && !pr->updateProgress(
            static_cast<int>(pStart + 0.1 * pScale))) return;

    fft->forward(dataPadded, dataFFT);

    if (pr != NULL && !pr->updateProgress(
            static_cast<int>(pStart + 0.3 * pScale))) return;

#ifdef _OPENMP
#pragma omp parallel for
#endif
    for (size_t i = 0; i < dataFFT.size(); ++i)
        dataFFT.dataFirst()[i] *= std::conj(kernelFFT->dataFirst()[i]) /
            (std::abs(dataFFT.dataFirst()[i] *
                      std::conj(kernelFFT->dataFirst()[i])) + eps);

    if (pr != NULL && !pr->updateProgress(
            static_cast<int>(pStart + 0.35 * pScale))) return;

    if (kernelFFT != &_kernelFFTCache) delete kernelFFT;

    fft->backward(dataFFT, dataPadded, BlitzFFTW<DataT>::OVERWRITE);
    dataFFT.free();

    if (pr != NULL && !pr->updateProgress(
            static_cast<int>(pStart + 0.55 * pScale))) return;

    fft->saveWisdom();

    // Copy the plain correlation result into the output Array
    result.resize(data.shape());
    blitz::RectDomain<Dim> dest(lb, ub);
    result = dataPadded(dest) / dataPadded.size();

    if (pr != NULL) pr->updateProgress(pr->taskProgressMax());
  }

  template<typename DataT, int Dim>
  void FastPhaseOnlyCorrelationFilter<DataT,Dim>::apply(
      blitz::Array<DataT,Dim> const &data,
      blitz::TinyVector<double,Dim> const &elementSizeUm,
      blitz::Array<DataT,Dim> &result,
      blitz::Array<DataT,Dim> const &kernel,
      BoundaryTreatmentType btType, DataT const &boundaryValue,
      iRoCS::ProgressReporter *pr)
  {
    FastPhaseOnlyCorrelationFilter<DataT,Dim> f(kernel, btType, boundaryValue);
    f.apply(data, elementSizeUm, result, pr);
  }

  template<typename DataT, int Dim>
  void FastPhaseOnlyCorrelationFilter<DataT,Dim>::apply(
      Array<DataT,Dim> const &data, Array<DataT,Dim> &result,
      blitz::Array<DataT,Dim> const &kernel,
      BoundaryTreatmentType btType, DataT const &boundaryValue,
      iRoCS::ProgressReporter *pr)
  {
    FastPhaseOnlyCorrelationFilter<DataT,Dim> f(kernel, btType, boundaryValue);
    f.apply(data, result, pr);
  }

}
